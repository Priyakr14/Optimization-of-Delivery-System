
model "Tour planning"
 uses "mmxprs", "mmsvg"


 declarations
  NORDERS = 27
  ORDERS = 1..NORDERS                    ! ORDERS

  k = 3
  M = 100000
  DIST: array(ORDERS,ORDERS) of integer  ! Distance between ORDERS
  X,Y: array(ORDERS) of integer
  truck: array(ORDERS,ORDERS) of mpvar     ! 1 if flight from i to j
  drone: array(ORDERS,ORDERS) of mpvar     ! 1 if drone is active
  em_dr: array(ORDERS,ORDERS) of mpvar     ! empty drone
  tr_n: array(ORDERS) of mpvar             ! 1 if truck visit particular node

  lambda: array(ORDERS) of mpvar

 end-declarations

 initializations from 'tsp_25.dat'
  DIST [X,Y] as 'POS'
 end-initializations

 forall(i,j in ORDERS | i<>j) DIST(j,i):=DIST(i,j)

! Objective: total cost
 TotalCost:= sum(i,j in ORDERS | i<>j) DIST(i,j)*truck(i,j)*10 + sum(i,j in ORDERS | i<>j) DIST(i,j)*drone(i,j)*3 + sum(i,j in ORDERS | i<>j) DIST(i,j)*em_dr(i,j)*3

! trucks constraint
! truck leaves from node 1 i.e. depot
 sum(j in ORDERS) truck(1,j)= 1
 ! truck comes back to node 27 i.e. depot
 sum(j in ORDERS) truck(j,27)= 1
 ! truck do not come to node 1 i.e. depot
 forall(j in ORDERS) truck(j,1) = 0
 ! truck do not leave node 27 i.e. depot
 forall(j  in ORDERS) truck(27,j) = 0
 ! truck do not go to node 1 to 27 i.e. 27 is duplicate of 1
 truck(1,27) = 0

 ! Node(j) to get on for launching drones only if truck has come to that node
 forall(j in 2..26) tr_n(j) = 1*sum(i in ORDERS)truck(i,j)
 !Truck should come to node(i) from anyone of the nodes and
 !should leave node (i) to anyone of the nodes.
 !given both nodes are in the optimal path for truck
 forall(i in 2..26) sum(j in ORDERS | i<>j) truck(i,j) = 1*tr_n(i)
 forall(j in 2..26) sum(i in ORDERS | i<>j) truck(i,j) = 1*tr_n(j)
 ! truck has to leave from any node it has reached
 forall(i in 2..26) sum(j in ORDERS) truck(i, j) = sum(j in ORDERS) truck(j,i)

 ! Constraint for drones
 !max no. of drones launched from any node, given truck has reached that node
 forall(i in 2..26) sum(j in ORDERS) drone(i,j) <= k *tr_n(i)
 !If drone has been launched from any node, it has to return to the same node
 forall(i in 2..26,j in 2..26) em_dr(i,j) = drone(j,i)
 !Drone should have visited all customers once
 forall(i in 2..26) sum(j in 2..26 | i<>j) (drone(i,j) + drone(j,i)) >= 1
 !Arc start and end nodes should be different
 forall(i in ORDERS) drone(i,i)= 0
 forall(i in ORDERS) truck(i,i)= 0
 ! drones can not be launched from node 1 and cannot reach 27
 forall(j in ORDERS) drone(1,j) = 0
 forall(i in ORDERS) drone(i,27) = 0

 !! SUBTOUR ELIMINATION CONSTRAINT

lambda(1)= 1
lambda(27)= 27
forall(i in ORDERS, j in ORDERS) lambda(j) >= lambda(i) + 1 - M*(1 - truck(i, j))

!Variable types
 forall(i,j in ORDERS | i<>j) truck(i,j) is_binary
 forall(i,j in ORDERS | i<>j) drone(i,j) is_binary
 forall(i,j in ORDERS | i<>j) em_dr(i,j) is_binary
 forall(i in ORDERS) tr_n(i) is_binary
 forall(i in ORDERS) lambda(i) is_integer


! Solve the problem
 minimize(TotalCost)


writeln("Begin running model")
writeln ("Optimal tour cost is: ", getobjval)
forall (i,j in ORDERS | getsol (truck(i,j))>0) do
writeln("TRUCK IS ON ROUTE ", i, " to ", j)
end-do
forall (i,j in ORDERS | getsol (drone(i,j))>0) do
writeln("DRONE IS ON ROUTE ", i," to ", j)
end-do
forall (i,j in ORDERS | getsol (em_dr(i,j))>0) do
writeln("DRONE RETURNING ON ROUTE ", i," to ", j)
end-do
writeln("End running model")
setparam("XPRS_MAXTIME", 3600)
